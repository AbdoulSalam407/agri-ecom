// Importation de React et des hooks n√©cessaires
import React, { createContext, useState, useContext, useEffect } from "react";

// Importation du service d'authentification qui g√®re les appels API
import { authService } from "../services/authService";

// Cr√©ation du contexte d'authentification
// Un contexte permet de partager des donn√©es entre plusieurs composants sans passer par les props
const AuthContext = createContext();

// Hook personnalis√© pour utiliser le contexte d'authentification
// Ce hook permet d'acc√©der aux donn√©es et fonctions d'authentification depuis n'importe quel composant
export const useAuth = () => {
  // R√©cup√®re le contexte actuel
  const context = useContext(AuthContext);

  // V√©rification de s√©curit√© : s'assure qu'on utilise le hook dans un composant enfant de AuthProvider
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }

  // Retourne toutes les donn√©es et fonctions d'authentification
  return context;
};

// Composant Provider qui englobe l'application et fournit le contexte d'authentification
// Les "children" sont tous les composants enfants qui pourront utiliser useAuth()
export const AuthProvider = ({ children }) => {
  // √âtat pour stocker l'utilisateur actuellement connect√© (null si d√©connect√©)
  const [currentUser, setCurrentUser] = useState(null);

  // √âtat pour g√©rer le chargement (pendant les requ√™tes login/register)
  const [loading, setLoading] = useState(true);

  // √âtat pour savoir si la v√©rification d'authentification initiale est termin√©e
  const [authChecked, setAuthChecked] = useState(false);

  // ===== EFFET POUR CHARGER L'UTILISATEUR AU D√âMARRAGE DE L'APPLICATION =====
  // useEffect s'ex√©cute apr√®s le premier rendu du composant
  useEffect(() => {
    const initializeAuth = () => {
      try {
        // Tente de r√©cup√©rer l'utilisateur depuis le localStorage ou les cookies
        const user = authService.getCurrentUser();
        console.log("üîÑ AuthContext - Utilisateur charg√©:", user);

        // Met √† jour l'√©tat avec l'utilisateur r√©cup√©r√©
        setCurrentUser(user);
      } catch (error) {
        // En cas d'erreur, on d√©connecte l'utilisateur
        console.error(
          "‚ùå AuthContext - Erreur lors du chargement de l'utilisateur:",
          error
        );
        setCurrentUser(null);
      } finally {
        // Dans tous les cas, on arr√™te le chargement et on marque la v√©rification comme termin√©e
        setLoading(false);
        setAuthChecked(true);
        console.log("‚úÖ AuthContext - Initialisation termin√©e");
      }
    };

    // Appel de la fonction d'initialisation
    initializeAuth();
  }, []); // Le tableau vide [] signifie que cet effet ne s'ex√©cute qu'une fois au montage du composant

  // ===== FONCTION DE CONNEXION =====
  const login = async (email, password) => {
    // V√©rification que les champs obligatoires sont remplis
    if (!email || !password) {
      return { success: false, error: "Email et mot de passe requis" };
    }

    // D√©marre le chargement
    setLoading(true);
    try {
      // Appel au service d'authentification pour se connecter
      const user = await authService.login(email, password);

      // Met √† jour l'√©tat avec le nouvel utilisateur connect√©
      setCurrentUser(user);
      console.log("‚úÖ AuthContext - Connexion r√©ussie:", user.name);

      // Retourne un succ√®s avec les donn√©es de l'utilisateur
      return { success: true, user };
    } catch (error) {
      // En cas d'erreur, retourne un message d'erreur
      console.error("‚ùå AuthContext - Erreur de connexion:", error);
      return { success: false, error: error.message };
    } finally {
      // Arr√™te le chargement dans tous les cas (succ√®s ou erreur)
      setLoading(false);
    }
  };

  // ===== FONCTION D'INSCRIPTION =====
  const register = async (userData) => {
    // Destructuration des donn√©es utilisateur avec valeurs par d√©faut
    const { email, password, name, role = "user" } = userData;

    // V√©rification que tous les champs obligatoires sont remplis
    if (!email || !password || !name) {
      return {
        success: false,
        error: "Tous les champs obligatoires doivent √™tre remplis",
      };
    }

    // D√©marre le chargement
    setLoading(true);
    try {
      // Appel au service d'authentification pour s'inscrire
      const user = await authService.register(userData);

      // Met √† jour l'√©tat avec le nouvel utilisateur
      setCurrentUser(user);
      console.log("‚úÖ AuthContext - Inscription r√©ussie:", user.name);

      // Retourne un succ√®s avec les donn√©es de l'utilisateur
      return { success: true, user };
    } catch (error) {
      // En cas d'erreur, retourne un message d'erreur
      console.error("‚ùå AuthContext - Erreur d'inscription:", error);
      return { success: false, error: error.message };
    } finally {
      // Arr√™te le chargement dans tous les cas
      setLoading(false);
    }
  };

  // ===== FONCTION DE D√âCONNEXION =====
  const logout = () => {
    try {
      console.log("üëã AuthContext - D√©connexion de:", currentUser?.name);

      // R√©initialise l'utilisateur √† null
      setCurrentUser(null);

      // Appelle le service pour nettoyer le localStorage/les cookies
      authService.logout();

      // Optionnel : Rediriger vers la page d'accueil apr√®s d√©connexion
      // Le timeout permet de laisser le temps √† l'interface de se mettre √† jour
      setTimeout(() => {
        if (window.location.pathname !== "/") {
          window.location.href = "/";
        }
      }, 100);
    } catch (error) {
      console.error("‚ùå AuthContext - Erreur lors de la d√©connexion:", error);
    }
  };

  // ===== FONCTION DE MISE √Ä JOUR DU PROFIL =====
  const updateProfile = async (userData) => {
    // V√©rifie qu'un utilisateur est connect√©
    if (!currentUser) {
      return { success: false, error: "Aucun utilisateur connect√©" };
    }

    try {
      // Appel au service pour mettre √† jour le profil
      const updatedUser = await authService.updateProfile(
        currentUser.id,
        userData
      );

      // Met √† jour l'√©tat avec les nouvelles donn√©es utilisateur
      setCurrentUser(updatedUser);
      console.log("‚úÖ AuthContext - Profil mis √† jour:", updatedUser.name);

      // Retourne un succ√®s avec les donn√©es mises √† jour
      return { success: true, user: updatedUser };
    } catch (error) {
      // En cas d'erreur, retourne un message d'erreur
      console.error(
        "‚ùå AuthContext - Erreur lors de la mise √† jour du profil:",
        error
      );
      return { success: false, error: error.message };
    }
  };

  // ===== FONCTIONS DE V√âRIFICATION DES R√îLES ET PERMISSIONS =====

  // V√©rifier si l'utilisateur a un r√¥le sp√©cifique
  const hasRole = (role) => {
    const hasRole = currentUser?.role === role;
    console.log(`üîç AuthContext - V√©rification r√¥le ${role}:`, hasRole);
    return hasRole;
  };

  // V√©rifier si l'utilisateur a l'un des r√¥les sp√©cifi√©s
  const hasAnyRole = (roles) => {
    // V√©rifie si le r√¥le de l'utilisateur est inclus dans le tableau des r√¥les autoris√©s
    const hasAny = roles.includes(currentUser?.role);
    console.log(`üîç AuthContext - V√©rification r√¥les ${roles}:`, hasAny);
    return hasAny;
  };

  // V√©rifier si l'utilisateur est connect√© et non bloqu√©
  const isAuthenticated = () => {
    const isAuth = !!currentUser && !currentUser.blocked;
    console.log(`üîç AuthContext - Utilisateur authentifi√©:`, isAuth);
    return isAuth;
  };

  // V√©rifier si l'utilisateur est bloqu√©
  const isBlocked = () => {
    const blocked = currentUser?.blocked === true;
    console.log(`üîç AuthContext - Utilisateur bloqu√©:`, blocked);
    return blocked;
  };

  // Obtenir le r√¥le de l'utilisateur (ou "guest" si non connect√©)
  const getUserRole = () => {
    const role = currentUser?.role || "guest";
    console.log(`üîç AuthContext - R√¥le utilisateur:`, role);
    return role;
  };

  // ===== VALEUR FOURNIE PAR LE CONTEXTE =====
  // Toutes les donn√©es et fonctions que les composants enfants pourront utiliser
  const value = {
    // Donn√©es
    currentUser, // Utilisateur actuel ou null
    loading, // √âtat de chargement
    authChecked, // Si la v√©rification initiale est termin√©e

    // Fonctions d'authentification
    login, // Fonction de connexion
    register, // Fonction d'inscription
    logout, // Fonction de d√©connexion
    updateProfile, // Fonction de mise √† jour du profil

    // Fonctions de v√©rification
    hasRole, // V√©rifier un r√¥le sp√©cifique
    hasAnyRole, // V√©rifier plusieurs r√¥les
    isAuthenticated, // V√©rifier si connect√© et non bloqu√©
    isBlocked, // V√©rifier si bloqu√©
    getUserRole, // Obtenir le r√¥le
  };

  // Le Provider rend ses enfants avec le contexte fourni
  // Tous les composants enfants pourront utiliser useAuth() pour acc√©der √† "value"
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
